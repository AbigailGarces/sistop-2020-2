#+title: Revisi√≥n de la tarea #2
#+options: toc:nil num:nil

* Criterios de calificaci√≥n

- Toda entrega que muestre trabajo y se acerque al planteamiento,
  aunque no funcione, tiene asegurada una calificaci√≥n m√≠nima de 6
- Si replica exitosamente el primer ejemplo (s√≥lo tabla de
  resultados), 7.5
- Si presenta el esquema visual, 9
- Si desarrollan un algoritmo de colas m√∫ltiples (retroalimentaci√≥n
  multinivel/FB, ronda ego√≠sta/SRR), 9
- Si presenta el esquema visual y adem√°s desarrollan un algoritmo de
  colas m√∫ltiples, 10

* Revisi√≥n

** Carlos Alc√°ntara
- Documentaci√≥n :: [[./AlcantaraCarlos/doc.txt][doc.txt]]
- Archivos :: [[./AlcantaraCarlos/tarea2SO.py][tarea2SO.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úì
- Comentarios ::
  - ¬°Muy buena implementaci√≥n!
  - ... Un poco dif√≠cil de leer. Usas nombres de variable cortos (que
    tienen sentido, pero no resultan claros a primera vista), y no hay
    comentarios. ¬øTe animar√≠as a darle mantenimiento a tu c√≥digo
    dentro de un par de a√±os? ‚ò∫
- Calificaci√≥n :: 10

** Jorge B√°rcenas
- Documentaci√≥n ::  [[./BarcenasJorge/algoritmos_planificacion.txt][algoritmos_planificacion.txt]],
- Archivos :: [[./BarcenasJorge/RR.py][RR.py]], [[./BarcenasJorge/RR4.py][RR4.py]], [[./BarcenasJorge/SPN.py][SPN.py]], [[./BarcenasJorge/fifo.py][fifo.py]], [[./BarcenasJorge/main.py][main.py]], [[./BarcenasJorge/common/mystats.py][mystats.py]],
              [[./BarcenasJorge/common/random_proc.py][random_proc.py]], [[./BarcenasJorge/common/watcher.py][watcher.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úó
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Modularizaci√≥n y reutilizaci√≥n de c√≥digo. ¬°Bien!
  - Comentarios √∫tiles y no excesivos. ¬°Bien!
  - Te falt√≥ un =.gitignore= para no mandarme c√≥digo precompilado
    espec√≠fico a tu instalaci√≥n (dentro de tu =__pycache__= est√°n los
    m√≥dulos compilados para Python 3.6)
- Calificaci√≥n :: 7.5

** Patricio Barrero y H√©ctor Espino
- Documentaci√≥n ::  [[./BarreroPatricio-EspinoHector/Documentacion.pdf][Documentacion.pdf]], [[./BarreroPatricio-EspinoHector/README.MD][README.MD]]
- Archivos :: [[./BarreroPatricio-EspinoHector/planificador.py][planificador.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úì
- Comentarios ::
  - ¬°Excelente implementaci√≥n! Todo lo que podr√≠a pedir al
    respecto. ¬°Hasta se deja leer bonito! ‚ò∫
- Calificaci√≥n :: 10

** Jorge C√°rdenas y Samuel Garrido
- Documentaci√≥n :: [[./CardenasJorge-GarridoSamuel/README.md][README.md]], [[./CardenasJorge-GarridoSamuel/img.png][img.png]]
- Archivos :: [[./CardenasJorge-GarridoSamuel/Planificadores.py][Planificadores.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úì
- Comentarios ::
  - ¬°Muy buena implementaci√≥n! F√°cil de leer y comprender. Tal vez un
    poco sobrecargado de comentarios redundantes, pero no excesivo
  - Me gusta que manejen argumentos de l√≠nea de comando ‚Äî Pero hay un
    bug ah√≠ para que resulten de utilidad:
    #+BEGIN_SRC python
      arg = sys.argv
      np = int(arg[1]) if len(arg) == 2 else 5 # N√∫mero de procesos
      nq = int(arg[2]) if len(arg) == 3 else 2 # N√∫mero de quantums (RR)
      p = int(arg[3]) if len(arg) == 4 else 5  # N√∫mero de Colas de (FB)
    #+END_SRC
    Si verifican con igualdad estricta, no puedo especificar los tres
    valores, pues los dos primeros "caen" al caso default. Deber√≠an
    usar el operador =>== en vez de ====.
- Calificaci√≥n :: 10

** Eduardo Jim√©nez y Sergio Osorio
- Documentaci√≥n :: [[./JimenezEduardoOsorioSergio/readme.md][readme.md]]
- Archivos :: [[./JimenezEduardoOsorioSergio/FCFS.py][FCFS.py]], [[./JimenezEduardoOsorioSergio/RoundRobin.py][RoundRobin.py]], [[./JimenezEduardoOsorioSergio/SPN.py][SPN.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ¬Ω imposibilita comparaci√≥n en el mismo
     caso
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ¬Ω (en FCFS y en RR1, no en SPN)
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Entregar tres programas separados que generan una tabla aleatoria
    har√≠a imposible una comparaci√≥n entre implementaciones como la que
    les mostr√© al plantear la tarea
  - El estilo de los tres programas que presentan es _muy_
    diferente. Densidad de comentarios, incluso el idioma en que
    desarrollan es muy dispar.
    - Prefiero no pensar mal, y asumir que repartieron el trabajo
      entre ustedes dos. Pero ... suena ... bastante raro
- Calificaci√≥n :: 8

** Javier Loidi y Kevin Lara
- Documentaci√≥n :: /No entregada/
- Archivos :: [[./LoidiJavier-LaraKevin/planificador.py][planificador.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úó (Falta SPN)
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - El c√≥digo est√° limpio, f√°cil de entender.
  - Ante cargas aleatorias, les falt√≥ considerar un caso: ¬øQu√© pasa
    cuando en determinado tick /no hay ning√∫n proceso/ por ejecutar?
    Cosa de ejecutar un par de veces, y aparece un caso problem√°tico:
    #+BEGIN_SRC text
       Procesos:  [['A', 0, 4], ['B', 5, 5], ['C', 10, 2], ['D', 13, 2], ['E', 15, 9]] 

      FCFS: 
	A  A  A  A
       ---- Para  A :  T =  4   E =  0   P =  1.0
	B  B  B  B  B
       ---- Para  B :  T =  4   E =  -1   P =  0.8
	C  C
       ---- Para  C :  T =  1   E =  -1   P =  0.5
	D  D
       ---- Para  D :  T =  0   E =  -2   P =  0.0
	E  E  E  E  E  E  E  E  E
       ---- Para  E :  T =  7   E =  -2   P =  0.7777777777777778
       T promedio =  3.2   E promedio =  -1.2   P promedio =  0.6155555555555555
    #+END_SRC
    - ¬°Es imposible tener un tiempo de espera de -1 o -2! (deber√≠an
      reportar un /hueco/ en =t=4= y =t=11= ‚Äî Entre el fin de =A= y el
      inicio de B, y entre el fin de =C= y el inicio de =D=)
    - ...Es un bug, pero menor y sutil. Pero se extiende a la l√≥gica
      de RR
- Calificaci√≥n :: 8

** Niver Mart√≠nez
- Documentaci√≥n :: [[./MartinezNiver/README.md][README.md]], [[./MartinezNiver/images/captura.PNG][captura.PNG]]
- Archivos :: [[./MartinezNiver/tarea_planif.py][tarea_planif.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úó
- Tabla de resultados :: ‚úì
- Esquema visual :: ¬Ω (funcional s√≥lo para FCFS)
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Muy bueno que le dediques tiempo a documentar cada funci√≥n. Te va
    a resultar una muy buena pr√°ctica para tu vida profesional üòâ
    (aunque no documentaste ni comentaste las funciones espec√≠ficas de
    los planificadores espec√≠ficos ‚òπ)
  - Si reemplazas =sec.append('N')= por =sec.append(i)= (l√≠nea 119),
    ver√°s que tu implementaci√≥n de RR no es correcta: Se comporta
    igual que FCFS (¬øy por qu√© te arroja resultados diferentes para la
    tabla?):
    #+BEGIN_SRC text
      FCFS: T: 12.00 E: 6.40 P: 2.09
      AAABBBBBBCCCCCCCDDDDEEEEEEEE
      RR1: T: 13.40 E: 7.80 P: 1.55
      0001111112222222333344444444
      RR1: T: 10.80 E: 5.20 P: 1.10
      000111111222222233334444444
      SPN: T: 0.00 E: 0.00 P: 0.00
    #+END_SRC
    - El orden de ejecuci√≥n para los procesos, a pesar de que usa
      nombres distintos, es exactamente el mismo
    - La duraci√≥n de la planificaci√≥n, sea FCFS, RR1 o RR4 (en el
      inferior veo que es √∫nicamente un error al imprimir la etiqueta)
      deber√≠a ser siempre exactamente la misma.
- Calificaci√≥n :: 7

** Alfonso Murrieta y Joaqu√≠n Valdespino
- Documentaci√≥n :: [[./MurrietaAlfonso-ValdespinoJoaquin/README.md][README.md]],
- Archivos :: [[./MurrietaAlfonso-ValdespinoJoaquin/auxFunctions.py][auxFunctions.py]], [[./MurrietaAlfonso-ValdespinoJoaquin/main.py][main.py]], [[./MurrietaAlfonso-ValdespinoJoaquin/process.py][process.py]], [[./MurrietaAlfonso-ValdespinoJoaquin/processClass.py][processClass.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Me gusta que dentro de la documentaci√≥n incluyan cuestiones
    respecto al paradigma utilizado y a la /est√©tica/ de la
    implementaci√≥n. ¬°Muy buenas se√±ales! üòÄ
  - Considero importante que comprendan que los lenguajes /siempre/
    pueden asumir su /biblioteca est√°ndar/. En su documentaci√≥n
    mencionan, /¬´M√≥dulo matem√°tico random <- descargar en caso de no
    tenerlo¬ª/ ‚Äî Tal vez alguna versi√≥n para embebidos como ŒºPython
    pueda carecer de parte de la biblioteca est√°ndar, pero ya con
    decir /Python 3.x/ est√°n asumiendo que est√° instalado =random=.
  - Por claridad, ser√≠a bueno representar en el diagrama de tiempo a
    los espacios muertos. Por ejemplo:
    #+BEGIN_SRC text
      A:10, t:6 B:0, t:9 C:13, t:8  
      PROCESS: FCFS - First Come First Serve 
      BBBBBBBBBAAAAAACCCCCCCC
       |  Time:8.667 | Wait or sleep:1.000 | Penalitation:1.125
    #+END_SRC
    La ejecuci√≥n en realidad deber√≠a mostrar
    =BBBBBBBBB-AAAAAACCCCCCCC= (porque hay un /tick/ vac√≠o entre =B= y
    =A=). El tiempo total de ejecuci√≥n no es s√≥lo la suma de los
    tiempos de cada proceso (=6+9+8=23=), sino que desde la llegada del
    primero (=t=0=) hasta la salida del √∫ltimo (=t=24=).
- Calificaci√≥n :: 9

** Alejandro P√©rez
- Documentaci√≥n :: /No entregada/
- Archivos :: [[./PerezAlejandro/tarea2.py][tarea2.py]]
- Lenguaje de implementaci√≥n :: Python
- Comentarios ::
  - Tu tarea est√° [[https://github.com/gwolf/sistop-2019-2/blob/master/tareas/3/MoralesCarlos-PerezQuirozMiguel/DEFINITIVO.py][copiada de alumnos de un semestre anterior]]
  - Es la segunda tarea copiada (¬°de dos!) que entregas en el
    semestre. Si no sientes que puedas desarrollar un ejercicio, o si
    no tienes tiempo para realizar tus tareas, com√©ntamelo en directo.
  - No tienes derecho a calificaci√≥n para esta entrega. Una vez m√°s
    que ocurra algo as√≠, y pierdes derecho a calificaci√≥n en la
    materia.
- Calificaci√≥n :: 0

** Roel P√©rez
- Documentaci√≥n :: [[./PerezRoel/ejemploEjecucion.txt][ejemploEjecucion.txt]], [[./PerezRoel/tarea2-doc.txt][tarea2-doc.txt]]
- Archivos :: [[./PerezRoel/tarea2.py][tarea2.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: /
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úì
- Comentarios ::
  - ¬°Qu√© bonita ejecuci√≥n! Es la implementaci√≥n m√°s clara que yo haya
    visto hasta ahora de este problema. ¬°Felicidades!
  - El c√≥digo tambi√©n es f√°cil de leer, limpio y documentado.
- Calificaci√≥n :: 10

** Sergio Reza
- Documentaci√≥n :: [[./RezaSergio/README.md][README.md]]
- Archivos :: [[./RezaSergio/tarea2.py][tarea2.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ‚úì
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Ser√° que... ¬øno consideras el tiempo que el planificador est√°
    inactivo? (los /ticks/ en que no hay ning√∫n proceso por ejecutar)
    S√≥lo eso puede llevarte a tiempos totales negativos (o incluso por
    debajo del promedio):
    #+BEGIN_SRC text
      A	t:5
      B	t:5
      C	t:3
      D	t:4
      E	t:6
      Proceso FCFS
      A|A|A|A|A|B|B|B|B|B|C|C|C|D|D|D|D|E|E|E|E|E|E|
      T: 4.6   	 E: 4.0   P: 0.5802020202020202 
      Proceso RR Quantum: 1
      A|B|A|B|A|B|A|B|A|B|C|D|C|D|C|D|E|D|E|E|E|E|E|
      T: 10.4  	 E: 5.4   P: 1.059090909090909 
      Proceso SPN
      A|A|A|A|A|C|C|C|B|B|B|B|B|D|D|D|D|E|E|E|E|E|E|
      T: -0.4  	 E: 3.6   P: 0.03257575757575757 
    #+END_SRC
    - Tuve que echarme un clavado en tus fuentes para encontrar el
      tiempo de llegada de cada proceso ‚Äî No lo reportas en la tabla
      de inicio, as√≠ que es necesario llegar a la l√≠nea 236 de tu
      programa para encontrar que es un par√°metro /en duro/ para la
      creaci√≥n de tus objetos. (¬øpor qu√©? Bueno, no importa ‚Äî no es
      incorrecto üòâ)
- Calificaci√≥n :: 9

** Ren√© V√°zquez
- Documentaci√≥n :: /No entregada/
- Archivos :: [[./VazquezRene/Tarea2.py][Tarea2.py]]
- Lenguaje de implementaci√≥n :: Python
- Se acerca al planteamiento :: ‚úì
- Algoritmos base completos :: ¬Ω falta SPN
- Tabla de resultados :: ‚úì
- Esquema visual :: ‚úì
- Alg√∫n algoritmo de colas m√∫ltiples :: ‚úó
- Comentarios ::
  - Buena implementaci√≥n, c√≥digo f√°cil de seguir.
- Calificaci√≥n :: 9


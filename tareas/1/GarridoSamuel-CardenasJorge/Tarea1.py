import threading as thrd
from threading import Semaphore
import random
import time
from concurrent.futures.thread import ThreadPoolExecutor
print("Tom, Jerry y sus amigos")

##Pedimos el n√∫mero de gatos, platos y ratones al usuario
gatoInput = int(input("Ingrese el n√∫mero de gatos: "))

ratonInput = int(input("Ingrese el n√∫mero de ratones: "))

platosInput = int(input("Ingrese el n√∫mero de platos: "))


#Necesitamos los sem√°foros que nos indicar√°n la posibilidad de que haya gatos y ratones en la habitaci√≥n

ratones = 0
gatos = 0
ratonMutex = Semaphore(1)
gatoMutex = Semaphore(1)
platos = Semaphore(platosInput)

#El apagador ya que si un gato come un rat√≥n no puede entrar 
Apagador = Semaphore(1)

#Haremos una lista para mostrar al final
listaVivos = []
listaMuertos = []

#Funci√≥n de comer o que coman al rat√≥n si un gato entra en escena
def comeRaton(id):
    global ratones, gatos
    platos.acquire() # Agarra un plato
    ratonMutex.acquire()
    ##Enciende la alarma de que ratones est√°n comiendo y ya no llegan gatos
    ratones = ratones + 1
    if ratones == 1:
        Apagador.acquire()
    ratonMutex.release()

    print("Rat√≥n ",id," est√° comiendo en el plato ",int(platos._value))  
    ##Liberamos al mutex del rat√≥n para indicar que pueden ingresar gatos pero ahora los gatos pueden entrar
    gatoMutex.acquire()
    ##Si llega a entrar un comerGato()

    if(gatos > 0):
        print("Un gato ha entrado a comer en el plato", int(platos._value))
        print("‚ùå El gato se ha comido al rat√≥n",id)
        listaMuertos.append(id)
    else:
        print("Acab√≥ de comer el rat√≥n ",id)
        listaVivos.append(id)
    ## En caso que no se encuentren ambos podemos liberar
    gatoMutex.release()
    ratonMutex.acquire()
    ratones-=1

    #En caso que ya no haya ratones por alimentar liberamos los mutexs
    if ratones == 0:
        Apagador.release()
        
    ratonMutex.release()
    platos.release()

def comeGato(id):
    global gatos
    Apagador.acquire()
    Apagador.release()
    ## Esto para que pueda ser posible que entren "accidentalmente los ratones"
    platos.acquire()
    ## Bajamos el n√∫mero de platos disponibles
    print("Gato",id, "est√° comiendo")        
    gatoMutex.acquire()
    ## Entra un gato por lo que por caballero informa que est√° presente
    gatos = gatos + 1
    time.sleep(random.random()) #Espera
    gatoMutex.release()
    print("El gato",id,"ha terminado de comer")
    gatoMutex.acquire()
    gatos = gatos - 1
    ## Se retira la advertencia
    gatoMutex.release()
    platos.release()
    ##Liberamos los dem√°s


def ContabilidadFinal():
    ##Realizamos una contabilidad final de los pobres ratones ca√≠dos en batalla
    print("\nüê≠üê≠ Los marcadores al final: üê≠üê≠")
    print("\nRatones Vivos: ")
    for x in listaVivos:
        print("Rat√≥n: ",x)
    print("\nRatones Muertos: ")
    for y in listaMuertos:
        print("Rat√≥n: ",y)


## Lanzamos los hilos de los gatos
for i in range(gatoInput):
    thrd.Thread(target=comeGato, args=[i+1]).start()

## Lanzamos los hilos de los ratones
for i in range(ratonInput):
    thrd.Thread(target=comeRaton, args=[i+1]).start()

## Esperamos que todo termine enumerando todos los hilos y hasta que hagan join lanzaremos el marcador
for thread in thrd.enumerate():
    if thread.daemon:
        continue
    try:
        thread.join()
    except RuntimeError as err:
        if 'cannot join current thread' in err.args[0]:
            continue
        else:
            raise

ContabilidadFinal()

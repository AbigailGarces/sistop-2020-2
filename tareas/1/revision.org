#+title: Revisi√≥n de la tarea 1
#+options toc:nil num:nil

* Criterios de calificaci√≥n

- Documentaci√≥n :: 2 puntos
- Programa funcional :: 2 puntos
- Planteamiento resuelto satisfactoriamente :: 3 puntos
- Aplicaci√≥n de los principios vistos en clase :: 3 puntos

* Revisi√≥n

** Javier Loidi
- Problema elegido :: El elevador
- Documentaci√≥n :: [[./LoidiJavier/readme.txt][readme.txt]]
- C√≥digo :: [[./LoidiJavier/elevador.py][elevador.py]]
- Lenguaje :: Python
- Comentarios ::
  - Me gusta tu resoluci√≥n ‚Äî Es simple y clara de seguir. Las
    construcciones que elegiste son adecuadas
  - Me pareci√≥ interesante que revises el estado interno del sem√°foro
    con =lugares._value=. Debemos tratar al sem√°foro como una caja
    negra inescrutable
    - Pero bueno, no lo hiciste para tomar una decisi√≥n a partir de su
      estado, sino que meramente por curiosidad. Y, como tal, te lo
      aplaudo ‚ò∫
  - Falta un punto importante (que es parte expresa de las reglas del
    ejercicio: /Para ir del piso x a y, el elevador tiene que cruzar
    todos los pisos intermedios/.  Tu elevador no guarda estado ‚Üí No
    est√° en ning√∫n piso
    - Por ello, puede ir dejando y recogiendo alumnos sin importar que
      lleven un orden l√≥gico. Por ejemplo:
      #+begin_src text
	Llevando a alumno  5  del piso  4  al piso  2 . Hay  5  a bordo
	estado de semaforo:  1 
	Llevando a alumno  8  del piso  3  al piso  4 . Hay  5  a bordo
	estado de semaforo:  1 
	Llevando a alumno  14  del piso  1  al piso  5 . Hay  5  a bordo
	estado de semaforo:  1 
	Llevando a alumno  2  del piso  2  al piso  3 . Hay  5  a bordo
	estado de semaforo:  1 
	Llevando a alumno  6  del piso  5  al piso  3 . Hay  5  a bordo
	estado de semaforo:  1 
	Llevando a alumno 10 del piso 4 al piso 5 . Hay 5 a bordo estado de
	semaforo: 1
      #+end_src
- Calificaci√≥n :: 8

** Eduardo Jim√©nez y Sergio Osorio
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./OsorioSergio-JimenezEduardo/SantaClaus/Claus.txt][Claus.txt]]
- C√≥digo :: [[./OsorioSergio-JimenezEduardo/SantaClaus/pom.xml][pom.xml]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/test-classes/.netbeans_automatic_build][.netbeans_automatic_build]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/maven-archiver/pom.properties][pom.properties]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/SantaClaus$estadoBarrera.class][SantaClaus$estadoBarrera.class]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/SantaClaus.class][SantaClaus.class]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/SantaClaus$Reno.class][SantaClaus$Reno.class]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/SantaClaus$atarRenos.class][SantaClaus$atarRenos.class]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/.netbeans_automatic_build][.netbeans_automatic_build]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/classes/SantaClaus$Elfo.class][SantaClaus$Elfo.class]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst][inputFiles.lst]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/maven-status/maven-compiler-plugin/compile/default-compile/createdFiles.lst][createdFiles.lst]], [[./OsorioSergio-JimenezEduardo/SantaClaus/target/maven-status/maven-compiler-plugin/testCompile/default-testCompile/inputFiles.lst][inputFiles.lst]], [[./OsorioSergio-JimenezEduardo/SantaClaus/src/main/java/SantaClaus.java][SantaClaus.java]]
- Lenguaje :: Java
- Comentarios ::
  - No aplicaron lo visto en la pr√°ctica 3 ‚òπ No deben subir a Gi
    archivos autogenerados y susceptibles de cambiar al ejecutarse.
  - =pom.xml=, =.netbeans_automatic_build=, =pom.properties=,
    =*.class=, =*.lst=... ¬°Todos esos deb√≠an haber sido mencionados en
    el .gitignore! El √∫nico archivo real de fuentes a revisar es
    SantaClaus.java
  - Es bueno que indiquen las dependencias (en este caso, NetBeans,
    Apache, maven 1.2.1)... Pero tambi√©n que, como programadores,
    entiendan el por qu√© de esa necesidad. No, no hay tal
    dependencia. Yo no tengo NetBeans, y:
    #+begin_src text
      ~/vcs/sistop-2020-2/tareas/1/OsorioSergio-JimenezEduardo/SantaClaus/src/main/java$ javac SantaClaus.java 
      ~/vcs/sistop-2020-2/tareas/1/OsorioSergio-JimenezEduardo/SantaClaus/src/main/java$ java SantaClaus 
      A√±o: 2020
      ...Elfos creando Juguetes...
      El elfo 8 necesita ayuda
      ...Elfos creando Juguetes...
      El elfo 9 necesita ayuda
      ...Elfos creando Juguetes...
      El elfo 7 necesita ayuda
      --- 3 elfos est√°n esperando por Santa ---
      ...Elfos creando Juguetes...
      ...Elfos creando Juguetes...
      El elfo 7 resolvi√≥ el problema con Santa
      (...)
    #+end_src
  - Respecto a la orientaci√≥n a objetos: Es una monserga, s√≠, que Java
    nos obligue a crear un archivo diferente por cada clase. Y que nos
    obligue a hacer POO, nos guste o no. Es c√≥moda la salida que le
    encuentran, a declarar (no conozco el t√©rmino en el lenguaje)
    clases internas. Pero... Los =Reno=, los =Elfo=, el hecho de
    =atarRenos= y el =estadoBarrera= /no son parte de/
    =SantaClaus=. Para seguir esta estrategia, yo sugerir√≠a que la
    clase externa se llamara =Navidad= ‚Äî y que =SantaClaus= fuera
    tambi√©n una clase interna.
  - Me gusta que pasada la √∫ltima navidad programada, el √∫ltimo reno
    tome en sus manos la ingrata tarea de matar a Santa üòâ (y que lo
    haga tan expl√≠citamente)
  - Ustedes saben algo que yo no. ¬°Es posible escribir c√≥digo en Java
    que me gusta! Felicidades, muy buena implementaci√≥n.
- Calificaci√≥n :: 10

** Sergio Reza
- Problema elegido :: Los alumnos y el asesor
- Documentaci√≥n :: /No entregada/
- C√≥digo :: [[./RezaSergio/Tarea1RezaSergio.py][Tarea1RezaSergio.py]]
- Lenguaje :: Python
- Comentarios ::
  - Sin documentaci√≥n ‚òπ
  - La implementaci√≥n es /casi/ correcta ‚Äî Pero como no hay
    interacci√≥n real (las preguntas las plantea y resuelve el mismo
    hilo), est√°s modelando una situaci√≥n con 10 alumnos /y 10
    maestros/ en una misma sala con cinco sillas.
  - Creo que incluso ser√≠a m√°s sencillo visualizar lo que pasa si
    partieras de:
    #+begin_src python
    Thread(target=asesor, args=[lugar]).start()
    for i in range(10):
        preguntas=randrange(1,4)
	hechas=0
	Thread(target=alumno, args[i+1, lugar, preguntas, hechas]).start()
    #+end_src
- Calificaci√≥n :: 7

** Roel P√©rez
- Problema elegido :: Los alumnos y el asesor
- Documentaci√≥n :: [[./PerezRoel/tarea1-doc.txt][tarea1-doc.txt]]
- C√≥digo :: [[./PerezRoel/tarea1.py][tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - Implementaci√≥n buena y clara
  - Documentaci√≥n muy completa, detalla perfectamente la l√≥gica que seguiste
  - Ya que lo detallas en la documentaci√≥n: Para no tener que matar
    malamente al programa con un profesor dormido y ya sin alumnos,
    podr√≠as poner al hilo externo a vigilar hasta que pase cierto
    tiempo (termina la hora de oficina, el profesor se va no importa
    qu√© dudas haya pendientes) o que ya no haya m√°s alumnos a la
    espera. Algo as√≠ como:
    #+begin_src python
      #Se inicia un hilo de asesor
      sesion_terminada=False
      t_asesor = Thread(target = asesor, args=[sesion_terminada])
      t_asesor.start()

      #Se inician 20 hilos de alumnos
      alumnos = []
      for i in range(1,21):
	      t_alumnos= Thread(target = alumno, args = [i])
	      alumnos.append(t_alumnos)
	      t_alumnos.start()

      # Esperamos a que terminen todos los alumnos
      for i in alumnos:
	  t.join()

      # Hacemos que el asesor despierte de su sue√±o. Estamos seguros de que
      # no hay ning√∫n otro alumno que quiera preguntar al profe.
      sesion_terminada=True
      preguntas.release()
      atencion.release()
    #+end_src
    Esto, mas una verificaci√≥n sobre =sesion_terminada= antes de
    comenzar a responder, le permitir√≠a al asesor irse a hacer alguna
    otra cosa.
- Calificaci√≥n :: 10

** Patricio Barrero y H√©ctor Espino
- Problema elegido :: Gatos y ratones
- Documentaci√≥n :: [[./BarreroPatricio_EspinoHector/Documentacion.pdf][Documentacion.pdf]]
- C√≥digo :: [[./BarreroPatricio_EspinoHector/ratones_gatos.py][ratones_gatos.py]]
- Lenguaje :: Python
- Comentarios ::
  - Voy a tener que despedir a un gato ‚òπ Los gatos no quieren comerse
    a los ratones, pero /tienen que/ hacerlo. Sin embargo, despu√©s de
    un ratito de interacci√≥n aparentemente correcta:
    #+BEGIN_SRC text
      Gato 1 estoy esperando
      Raton 0 estoy comiendo en el plato Plato #1 esta ocupado
      Gato 1 estoy comiendo en el plato Plato #1 esta ocupado
      Gato 1 desocupe el plato Plato #1 esta libre
      Gato 1 estoy esperando
      Raton 0 desocupe el plato Plato #1 esta libre
      Raton 6 estoy comiendo en el plato Plato #2 esta ocupado
      Gato 1 estoy comiendo en el plato Plato #1 esta ocupado
    #+END_SRC
  - Este problema se trata de una /exclusi√≥n categ√≥rica/ ‚Üí Pueden
    resolverlo como los /lectores y escritores/
  - Me parece una implementaci√≥n interesante, aunque muy distinta de
    lo que estoy acostumbraod a ver. Es un manejo mucho m√°s limpio OOP
    de lo que estoy acostumbrado a ver (¬°incluso con manejo de
    herencia!)
  - ... Extra√±√© m√°s comentarios en el c√≥digo ‚òπ Es una muy sana
    costumbre hacerlos.
  - Me queda la duda: Dado que =Gato= y =Raton= tienen el mismo
    =__init__()=, y en ambos casos es √∫nicamente llamar al
    =__init__()= de su superclase... Creo que esto ser√≠a m√°s limpio:
    #+BEGIN_SRC python
      class Gato(Animal):
	  pass
      class Raton(Animal):
	  pass
    #+END_SRC
- Calificaci√≥n :: 8

** Samuel Garrido y Jorge C√°rdenas
- Problema elegido :: Gatos y ratones
- Documentaci√≥n :: [[./GarridoSamuel-CardenasJorge/README.md][README.md]], [[./GarridoSamuel-CardenasJorge/23.png][23.png]]
- C√≥digo :: [[./GarridoSamuel-CardenasJorge/Tarea1.py][Tarea1.py]]
- Lenguaje :: Python
- Comentarios ::
  - ¬°Excelente implementaci√≥n!
  - Muy bien identificado como exclusi√≥n categ√≥rica / apagador
  - Muy buena manera de modelar los requisitos posiblemente
    inconsistentes del planteamiento: Se controla la exclusi√≥n
    categ√≥rica al momento de entrar a comer, pero el gato puede llegar
    mientras el rat√≥n ya est√° adentro (y se lo tiene que comer, ni
    hablar)
- Calificaci√≥n :: 10

** Alejandro P√©rez
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./PerezAlejandro/planteamiento.txt][planteamiento.txt]]
- C√≥digo :: [[./PerezAlejandro/staclaus.py][staclaus.py]]
- Lenguaje :: Python
- Comentarios ::
  - Esta tarea ya hab√≠a sido entregada, [[https://github.com/gwolf/sistop-2019-1/blob/master/tareas/1/ValerianoCristian/tarea1.py][hace 18 meses]] ‚òπ
  - Eso es *plagio*. No acepto la entrega.
- Calificaci√≥n :: 0

** Alam Guill√©n y Ricardo Mu√±oz
- Problema elegido :: Gatos y ratones
- Documentaci√≥n :: /No entregada/
- C√≥digo :: [[./GuillenAlam-Mu√±ozRicardo/tarea 1.txt][tarea 1.txt]]
- Lenguaje :: Python
- Comentarios ::
  - La entrega que hacen es una rara mezcla de Python y texto... Es un
    Python no ejecutable. Quitando las l√≠neas de guiones y el
    encabezado (¬°que no es que cuente como documentaci√≥n!) funciona
    correctamente.
    - Ni documentaci√≥n ni comentarios ‚òπ
  - Cuesta trabajo seguir la l√≥gica. Pero me parece que para cada
    =gato()= y =raton()= se crea un nuevo plato (no hay un n√∫mero
    finito de platos)
  - No contemplas interacci√≥n entre gatos y ratones (que es requerida
    por el planteamnieto del problema)
  - Iban por el camino correcto para implementar una /exclusi√≥n
    categ√≥rica/ (apagador), que es la resoluci√≥n m√°s clara para este
    problema, pero me parece que se les revolvi√≥ la implementaci√≥n...
    - ... y sin comentarios, no me atrevo a se√±alar "aqu√≠ s√≠ / aqu√≠ no"
- Calificaci√≥n :: 6.5

** Carlos Alc√°ntara
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./AlcantaraCarlos/Tarea1SO.pdf][Tarea1SO.pdf]]
- C√≥digo :: [[./AlcantaraCarlos/renos.py][renos.py]]
- Lenguaje :: Python
- Comentarios ::
  - Buena implementaci√≥n, correcta y de f√°cil lectura
  - No hay ayuda expl√≠cita de Santa a los duendes (se juntan tres, lo
    despiertan... y se dan por atendidos). Pero se vale :-] A fin de
    cuentas, Santa es m√°gico.
- Calificaci√≥n :: 10

** Alfonso Murrieta y Joaqu√≠n Valdespino
- Problema elegido :: Gatos y ratones
- Documentaci√≥n :: [[./MurrietaAlfonso-ValdespinoJoaquin/README.md][README.md]]
- C√≥digo :: [[./MurrietaAlfonso-ValdespinoJoaquin/gatosRatones.py][gatosRatones.py]]
- Lenguaje :: Python
- Comentarios ::
  - Respecto a la duda que plantean: El /acuerdo de caballeros/ dice
    que /har√°n lo posible/ por no ser brutos y comerse los unos a los
    otros. Pero si se ven en la necesidad y coinciden ante los platos,
    pues... tendr√°n que com√©rselos
    - Si el planteamiento considera al acuerdo de caballeros, pero
      creen que no son implementables, podr√≠an hacer c√≥digo que
      contemplara que se lo comiera ‚Äî aunque nunca fuera invocado (por
      estar en un √°rea imposible de alcanzar de un mutex)
  - La implementaci√≥n es correcta: Exclusi√≥n categ√≥rica, dejando un
    espacio en que el rat√≥n vea si lleg√≥ alg√∫n gato (y decida morirse
    √©l solito ‚ò∫) ¬°Bien!
- Calificaci√≥n :: 10
		  
** Sa√∫l Badillo
- Problema elegido :: Elevador
- Documentaci√≥n :: [[./BadilloSaul/README.md][README.md]]
- C√≥digo :: [[./BadilloSaul/elevador.c][elevador.c]]
- Lenguaje :: C
- Comentarios ::
  - ¬°Bien! Un valiente que se anima a quitarle las rueditas a la
    bicicleta y escribir en C
  - ¬°Y usando variables de condici√≥n! ¬°Buen√≠simo! ‚ò∫
  - Como mencionas en la documentaci√≥n, el elevador hace √∫nicamente un
    recorrido (del piso 0 al piso 5). No vuelve a bajar.
    - Me parece que la correcci√≥n para esto es trivial ‚Äî En vez de
      simplemente un =for(piso=0;piso<5;piso++)=, podr√≠as agregar una
      bandera =direccion=, y mantener subiendo y bajando en un =while(1)=;
  - Por lo visto, todos los alumnos van... ¬ødel piso 0 al piso 4? ¬øO
    qu√© significa que le des el arreglo completo =pisos= a cada uno de
    los alumnos? En ning√∫n lugar eligen su destino. Me parece que
    simplemente se bajan cuando se /des-duermen/, no en donde les
    toca.
  - Adem√°s... Creas al =elevador= antes que a ninguno de los hilos, y
    le das un =sleep(1)= antes de crear al primer
    =alumno=. ¬øC√≥mo esperas que aborden el elevador?
  - Te sugiero que, en vez de crear variables separadas para los hilos
    =t1=, =t2=, =t3=, =t4= y =t5=, generes un solo arreglo. Eso te
    deja un c√≥digo resultante m√°s limpio y en mi opini√≥n
    claro.

    Adem√°s, como puedes ver aqu√≠, m√°s extensible ‚Äî dejas en una
    constante el tama√±o de tu arreglo, y se pueden generar tantos
    hilos como quieras.
    #+BEGIN_SRC C
      #define CUANTOS 100
      pthread_t thr[CUANTOS];
      int i;
      int pisos[]={0,4};

      pthread_create(&thr[0],NULL,elevador,pisos); 
      sleep(1); 
      for (i=1;i<CUANTOS;i++) {
	pthread_create(&thr[i], NULL, alumno, pisos);
	sleep(1);
       }
      for (i=0;i<CUANTOS;i++)
	pthread_join(thr[i], NULL);
    #+END_SRC
- Calificaci√≥n :: 9

** Jorge B√°rcenas
- Problema elegido :: El cruce del r√≠o
- Documentaci√≥n :: [[./BarcenasJorge/el_cruce_del_rio.txt][el_cruce_del_rio.txt]]
- C√≥digo :: [[./BarcenasJorge/el_cruce_rio.py][el_cruce_rio.py]]
- Lenguaje :: Python
- Comentarios ::
  - Tienes una condici√≥n de carrera no resuelta: En una de las
    ejecuciones vi:
    #+BEGIN_SRC text
      ,*** Zarpando  la balsa
      hacker 9 subiendo a la balsa
      hacker 10 subiendo a la balsa
      hacker 11 subiendo a la balsa
      serf 0 subiendo a la balsa
      serf 1 subiendo a la balsa
      ,*** Zarpando a la balsa
      hacker 8 subiendo a la balsa
      serf 2 subiendo a la balsa
      serf 5 subiendo a la balsa
      ,*** Zarpando a la balsa
    #+END_SRC
    (y luego constat√© que lo mencionaste en tu documentaci√≥n)
    - El ver una balsa de 5 seguida una de 3 me hace pensar en que tus
      estructuras est√°n bien, pero el =print()= se les adelanta
    - Si agregas un contador (con su respectivo mutex ‚Äî Sin este
      mutex, s√≠ se mantiene la condici√≥n de carrera) al manejo de la
      balsa, el problema se corrige:
      #+BEGIN_SRC python
	def hacker(num):
		global hackers,serfs,esCap, num_balsa, mutex_nb
		#print("hacker %d esperando ..." %num)
		mutex_balsa.acquire()
		with mutex_nb:
			if hackers == 0 and serfs == 0:
				num_balsa += 1
		hackers+=1
      #+END_SRC
      (y la contraparte en =serf()=, y para asegurar, incluyendo el
      n√∫mero de balsa en todos los dem√°s =print()=)
- Calificaci√≥n :: 8.5

** Niver Mart√≠nez
- Problema elegido :: Santa Claus
- Documentaci√≥n :: [[./MartinezNiver/README.md][README.md]]
- C√≥digo :: [[./MartinezNiver/santaClaus.py][santaClaus.py]]
- Lenguaje :: Python
- Comentarios ::
  - Tu programa no funciona ‚òπ Lanza excepciones... Intento corregirlo
    para ver si es algo trivial, o centro mi revisi√≥n en el fuente
    - Las excepciones marcan que utilizas a =elfos= para una
      comparaci√≥n antes de haberlo inicializado. ¬øSoluci√≥n? Agregar
      =global elfos= al inicio de las funciones =syncElfo()= y
      =syncSanta()=. Podr√≠as tambi√©n recibir a =elfos= como argumento,
      te dar√≠a m√°s o menos el mismo resultado
    - La √∫nica salida observable de tu programa es:
      #+BEGIN_SRC text
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
      #+END_SRC
      Y es que... S√≠, ¬°lo hacen a toda velocidad! Dentro de
      =syncElfo()= hay un s√≥lo =acquire()= que no sea sobre un mutex
      sencillo, sobre =torElfo=. Si lo quito, veo un correcto avance
      con los elfos (aunque el mensaje no necesariamente es el
      correcto):
      #+BEGIN_SRC text
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa se levant√≥...
	ayudando elfos...
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa ha atendiendo tres elfos...
	Santa se levant√≥...
	ayudando elfos...
      #+END_SRC
    - ¬øY los renos? No, esos nunca van a salir. No le diste =start()=
      a los hilos. Y le est√°s dando un argumento que no espera. Y
      =renos= no es global. Y a veces le llamas =renos=, a veces
      =reno=....
  - No puedo considerar el programa funcional de ninguna manera ‚òπ
  - Me parece que la l√≥gica que presentas es correcta. Mencionas en tu
    documentaci√≥n que algo en los sem√°foros "no te queda", y me parece
    que es el manejo de los renos... ¬ø?
- Calificaci√≥n :: 7

** Ren√© V√°zquez
- Problema elegido :: Santa Claus
- Documentaci√≥n ::  /No entregada/
- C√≥digo :: [[./VazquezRene/Santa.py][Santa.py]]
- Lenguaje :: Python
- Comentarios ::
  - Sin documentaci√≥n ‚òπ
  - Tu c√≥digo tiene varios errores sint√°cticos (par√©ntesis de m√°s y de
    menos, bloques no indentados, indentaci√≥n que no sigue a =:=, etc.)
  - Hay variables que son presentadas en un punto en espa√±ol, m√°s
    adelante en ingl√©s...
  - ... Tengo que dudar acerca de si el c√≥digo es realmente
    tuyo. Entiendo que realizaste el trabajo r√°pido por no haberte
    enterado de las clases en l√≠nea; si el c√≥digo es tuyo, /antes del
    martes 31, 23:59/ entr√©game el c√≥digo corregido y documentaci√≥n
    /explicando la l√≥gica empleada/, y lo tomo. Mientras tanto, tengo
    que asumir que el c√≥digo no es tuyo.
- Calificaci√≥n :: 0
